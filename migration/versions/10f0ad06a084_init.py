"""init

Revision ID: 10f0ad06a084
Revises: 
Create Date: 2024-09-14 16:28:40.925080

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '10f0ad06a084'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
        sa.Column('uid', sa.UUID(), nullable=False),
        sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('is_verified', sa.Boolean(), nullable=False),
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint('uid'),
        sa.UniqueConstraint('uid')
    )

    # Add the USING clause to cast the existing values
    op.alter_column(
        'books', 'published_date',
        existing_type=sa.VARCHAR(),
        type_=sa.DateTime(),
        existing_nullable=False,
        postgresql_using="published_date::timestamp without time zone"
    )

    op.create_unique_constraint(None, 'books', ['uid'])
    # ### end Alembic commands ###



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'books', type_='unique')
    op.alter_column('books', 'published_date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_table('users')
    # ### end Alembic commands ###
